/* File: arrays.deep
 * Implementation of typical array operations.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

// Prints all the elements in the array list referred by handle a.

main() {
    var s, a, i, n;
    fails = 0;
    assert('\n', 10, "error in newline literal");
    assert('\r', 13, "error in carriage return literal");
    assert('\t', 9, "error in tab literal");
    assert('\\', 92, "error in backslash literal");
    assert('\'', 39, "error in single quote literal");
    assert('\"', 34, "error in double quote literal");
    assert('\u000041', 'A', "error in letter A literal code point");
    assert('\u0020AC', 8364, "error in euro literal code point");
    s = "\u0000A1\u0020ACste ni\u0000F1o \u0020ACst\u0000E1 bien \u0000D1o\u0000F1o!\n";
    a = [161, 8364, 115, 116, 101, 32, 110, 105, 241, 111, 32, 8364, 115, 116,
         225, 32, 98, 105, 101, 110, 32, 209, 111, 241, 111, 33, 10];
    i = 0;
    n = size(s);
    loop {
        if (i == n) {
            break;
        }
        assert(get(a, i), get(s, i), "error in string literal");
        i++;
    }
    printi(fails);
    prints(" assertion failure(s) found.");
    println();
    prints(a);
}


print_array(a) {
    var first, i, n;
    first = 42;
    printc('[');
    i = 0;
    n = size(a);
    loop {
        if (i == n) {
            break;
        }
        if (first) {
            first = 0;
        } else {
            prints(", ");
        }
        printi(get(a, i));
        i++;
    }
    printc(']');
}

// Returns the addition of all elements in the array list referred by handle a.
sum_array(a) {
    var sum, i, n;
    sum = 0;
    i = 0;
    n = size(a);
    loop {
        if (i == n) {
            break;
        }
        sum = sum + get(a, i);
        i++;
    }
    return sum;
}

// Returns the largest element in the array list referred by handle a.
max_array(a) {
    var max, i, n, x;
    max = get(a, 0);
    i = 0;
    n = size(a);
    loop {
        if (i == n) {
            break;
        }
        x = get(a, i);
        if (x > max) {
            max = x;
        }
        i++;
    }
    return max;
}

// Sorts in-place the elements in the array list referred by handle a.
// Uses the bubble sort algorithm.
sort_array(a) {
    var i, j, t, n, swap;
    n = size(a);
    i = 0;
    loop {
        if (i >= n - 1) {
            break;
        }
        j = 0;
        swap = 0;
        loop {
            if (j >= n - i - 1) {
                break;
            }
            if (get(a, j) > get(a, j + 1)) {
                t = get(a, j);
                set(a, j, get(a, j + 1));
                set(a, j + 1, t);
                swap = 42;
            }
            j++;
        }
        if (!swap) {
            break;
        }
        i++;
    }
}

main() {
    var array, sum, max;
    array = [73, 77, 56, 10, 14,
             54, 75, 62, 71, 10,
              3, 71, 16, 49, 66,
             91, 69, 62, 25, 65];
    prints("Original array: ");
    print_array(array);
    println();
    sum = sum_array(array);
    max = max_array(array);
    prints("Sum of array:   ");
    printi(sum);
    println();
    prints("Max of array:   ");
    printi(max);
    println();
    sort_array(array);
    prints("Sorted array:   ");
    print_array(array);
    println();
}


/* File: binary.deep
 * Converts decimal numbers into binary.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

 // Inverts in-place the contents of an array list.
reverse(array) {
    var start, finish, temp;
    start = 0;
    finish = size(array) - 1;
    loop {
        if (start >= finish) {
            break;
        }
        temp = get(array, start);
        set(array, start, get(array, finish));
        set(array, finish, temp);
        start++;
        finish--;
    }
}

// Converts num to a string with its binary representation.
binary(num) {
    var result, remainder;
    if (num <= 0) {
        return "0";
    }
    result = "";
    loop {
        remainder = num % 2;
        add(result, remainder + '0');
        num = num / 2;
        if (num == 0) {
            break;
        }
    }
    reverse(result);
    return result;
}

main() {
    var option, num;
    loop {
        prints("Input a number: ");
        num = readi();
        prints("Conversion to binary of that number: ");
        prints(binary(num));
        println();
        prints("Convert another number? ");
        option = reads();
        if (size(option) == 0) {
            option = 'N';
        } else {
            option = get(option, 0);
        }
        if (option != 'Y' && option != 'y') {
            break;
        }
    }
}


/* File: factorial.deep
 * Computes factorials using iteration and recursion.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

// Iterative version for computing factorial of n.
iterative_factorial(n) {
    var result, i;
    result = 1;
    i = 2;
    loop {
        if (i > n) {
            break;
        }
        result = result * i;
        i++;
    }
    return result;
}

// Recursive version for computing factorial of n.
recursive_factorial(n) {
    if (n <= 0) {
        return 1;
    } else {
        return n * recursive_factorial(n - 1);
    }
}

main() {
    var num, option;
    loop {
        prints("Input a number: ");
        num = readi();
        prints("Iterative factorial: ");
        printi(iterative_factorial(num));
        println();
        prints("Recursive factorial: ");
        printi(recursive_factorial(num));
        println();
        prints("Compute another factorial? ");
        option = reads();
        if (size(option) == 0) {
            option = 'N';
        } else {
            option = get(option, 0);
        }
        if (option != 'Y' && option != 'y') {
            break;
        }
    }
}


/* File: literals.deep
 * Verifies that the implementation of literal values meet the specified
 * requirements.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

var fails;

assert(value1, value2, message) {
    if (value1 != value2) {
        fails = fails + 1;
        prints("Assertion failure: ");
        prints(message);
        println();
    }
}

/* File: next_day.deep
 * Given the date of a certain day, determines the date of the day after.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

// Returns 42 if y is a leap year, otherwise returns 0.
is_leap_year(y) {
    if (y % 4 == 0) {
        if (y % 100 == 0) {
            if (y % 400 == 0) {
                return 42;
            } else {
                return 0;
            }
        } else {
            return 42;
        }
    } else {
        return 0;
    }
 }

// Returns the total number of days in month m of year y.
number_of_days_in_month(y, m) {
    var result;
    if (m == 2) {
        if (is_leap_year(y)) {
            result = 29;
        } else {
            result = 28;
        }
    } elseif (m == 4 || m == 6 || m == 9 || m == 11) {
        result = 30;
    } else {
        result = 31;
    }
    return result;
}

// Given y, m, d (year, month day), returns the handle of a new array list
// with the date of the following day.
next_day(y, m, d) {
    if (d == number_of_days_in_month(y, m)) {
        if (m == 12) {
            return [y + 1, 1, 1];
        } else {
            return [y, m + 1, 1];
        }
    } else {
        return [y, m, d + 1];
    }
}

// Prints the given date (y, m, d) and the date of the following day.
print_next_day(y, m, d) {
    var next;
    prints("The day after ");
    printi(y);
    printc('/');
    printi(m);
    printc('/');
    printi(d);
    prints(" is ");
    next = next_day(y, m, d);
    printi(get(next, 0));
    printc('/');
    printi(get(next, 1));
    printc('/');
    printi(get(next, 2));
    println();
}

main() {
    print_next_day(2018, 2, 21);
    print_next_day(2018, 2, 28);
    print_next_day(2020, 2, 28);
    print_next_day(2020, 12, 31);
}


/* File: palindrome.deep
 * Determines if a string is a palindrome.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

// Returns 42 if str is a palindrome, 0 otherwise.
is_palindrome(str) {
    var start, finish;
    start = 0;
    finish = size(str) - 1;
    loop {
        if (start >= finish) {
            return 42;
        }
        if (get(str, start) != get(str, finish)) {
            return 0;
        }
        start++;
        finish--;
    }
}

main() {
    var str, option;
    loop {
        prints("Input a string: ");
        str = reads();
        prints("The string \"");
        prints(str);
        prints("\" is ");
        if (!is_palindrome(str)) {
            prints("NOT ");
        }
        prints("a palindrome.\n");
        prints("Check another string? ");
        option = reads();
        if (size(option) == 0) {
            option = 'N';
        } else {
            option = get(option, 0);
        }
        if (option != 'Y' && option != 'y') {
            break;
        }
    }
}


/* File: ultimate.deep
 * Prints the answer to the ultimate question of life, the
 * universe, and everything.
 * (C) 2018 Ariel Ortiz, ITESM CEM
 */

main() {
    prints("The answer to the ultimate question of life, ");
    prints("the universe, and everything: ");
    printi(!0);
    println();
}

